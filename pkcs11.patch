--- auth-dialog/main_old.c	2018-01-08 14:08:21.000000000 +0100
+++ auth-dialog/main.c	2020-03-26 14:10:28.891579399 +0100
@@ -93,6 +93,9 @@
                                  gboolean need_password,
                                  const char *existing_password,
                                  char **out_new_password,
+                                 gboolean need_pin,
+                                 const char *existing_pin,
+                                 char **out_new_pin,
                                  gboolean need_certpass,
                                  const char *existing_certpass,
                                  char **out_new_certpass,
@@ -105,6 +108,8 @@
                             gboolean allow_interaction,
                             gboolean need_password,
                             const char *password,
+                            gboolean need_pin,
+                            const char *pin,
                             gboolean need_certpass,
                             const char *certpass,
                             gboolean need_proxypass,
@@ -159,6 +164,8 @@
             gboolean allow_interaction,
             gboolean need_password,
             const char *existing_password,
+            gboolean need_pin,
+            const char *existing_pin,
             gboolean need_certpass,
             const char *existing_certpass,
             gboolean need_proxypass,
@@ -184,6 +191,13 @@
 	                        need_password && allow_interaction);
 
 	keyfile_add_entry_info (keyfile,
+	                        NM_OPENVPN_KEY_PKCS11_PIN,
+	                        existing_pin ? existing_pin : "",
+	                        _("PIN:"),
+	                        TRUE,
+	                        need_pin && allow_interaction);
+
+	keyfile_add_entry_info (keyfile,
 	                        NM_OPENVPN_KEY_CERTPASS,
 	                        existing_certpass ? existing_certpass : "",
 	                        _("Certificate password:"),
@@ -215,6 +229,9 @@
               gboolean need_password,
               const char *existing_password,
               char **out_new_password,
+              gboolean need_pin,
+              const char *existing_pin,
+              char **out_new_pin,
               gboolean need_certpass,
               const char *existing_certpass,
               char **out_new_certpass,
@@ -228,6 +245,7 @@
 	g_return_val_if_fail (vpn_name != NULL, FALSE);
 	g_return_val_if_fail (prompt != NULL, FALSE);
 	g_return_val_if_fail (out_new_password != NULL, FALSE);
+	g_return_val_if_fail (out_new_pin != NULL, FALSE);
 	g_return_val_if_fail (out_new_certpass != NULL, FALSE);
 	g_return_val_if_fail (out_new_proxypass != NULL, FALSE);
 
@@ -238,10 +256,13 @@
 	if (need_password)
 		nma_vpn_password_dialog_set_password (dialog, existing_password);
 
-	nma_vpn_password_dialog_set_show_password_secondary (dialog, need_certpass);
+	nma_vpn_password_dialog_set_show_password_secondary (dialog, need_certpass || need_pin);
 	if (need_certpass) {
 		nma_vpn_password_dialog_set_password_secondary_label (dialog, _("Certificate pass_word:") );
 		nma_vpn_password_dialog_set_password_secondary (dialog, existing_certpass);
+	} else if (need_pin) {
+		nma_vpn_password_dialog_set_password_secondary_label (dialog, _("PKCS#11 PIN:") );
+		nma_vpn_password_dialog_set_password_secondary (dialog, existing_pin);
 	}
 
 	nma_vpn_password_dialog_set_show_password_ternary (dialog, need_proxypass);
@@ -254,6 +275,8 @@
 	if (nma_vpn_password_dialog_run_and_block (dialog)) {
 		if (need_password)
 			*out_new_password = g_strdup (nma_vpn_password_dialog_get_password (dialog));
+		if (need_pin)
+			*out_new_pin = g_strdup (nma_vpn_password_dialog_get_password_secondary (dialog));
 		if (need_certpass)
 			*out_new_certpass = g_strdup (nma_vpn_password_dialog_get_password_secondary (dialog));
 		if (need_proxypass)
@@ -297,6 +320,8 @@
             gboolean allow_interaction,
             gboolean need_password,
             const char *password,
+            gboolean need_pin,
+            const char *pin,
             gboolean need_certpass,
             const char *certpass,
             gboolean need_proxypass,
@@ -305,6 +330,8 @@
 	/* Send the passwords back to our parent */
 	if (password)
 		printf ("%s\n%s\n", NM_OPENVPN_KEY_PASSWORD, password);
+	if (pin)
+		printf ("%s\n%s\n", NM_OPENVPN_KEY_PKCS11_PIN, pin);
 	if (certpass)
 		printf ("%s\n%s\n", NM_OPENVPN_KEY_CERTPASS, certpass);
 	if (proxypass)
@@ -325,9 +352,11 @@
                         GHashTable *existing_secrets,
                         const char *vpn_uuid,
                         gboolean need_password,
+                        gboolean need_pin,
                         gboolean need_certpass,
                         gboolean need_proxypass,
                         char **out_password,
+                        char **out_pin,
                         char **out_certpass,
                         char **out_proxypass)
 {
@@ -336,6 +365,7 @@
 	NMSettingSecretFlags proxy_flags = NM_SETTING_SECRET_FLAG_NONE;
 
 	g_return_if_fail (out_password != NULL);
+	g_return_if_fail (out_pin != NULL);
 	g_return_if_fail (out_certpass != NULL);
 	g_return_if_fail (out_proxypass != NULL);
 
@@ -348,6 +378,15 @@
 		}
 	}
 
+	nm_vpn_service_plugin_get_secret_flags (vpn_data, NM_OPENVPN_KEY_PKCS11_PIN, &pw_flags);
+	if (need_pin) {
+		if (!(pw_flags & NM_SETTING_SECRET_FLAG_NOT_SAVED)) {
+			*out_pin = g_strdup (g_hash_table_lookup (existing_secrets, NM_OPENVPN_KEY_PKCS11_PIN));
+			if (!*out_pin)
+				*out_pin = keyring_lookup_secret (vpn_uuid, NM_OPENVPN_KEY_PKCS11_PIN);
+		}
+	}
+
 	nm_vpn_service_plugin_get_secret_flags (vpn_data, NM_OPENVPN_KEY_CERTPASS, &cp_flags);
 	if (need_certpass) {
 		if (!(cp_flags & NM_SETTING_SECRET_FLAG_NOT_SAVED)) {
@@ -373,6 +412,7 @@
 get_passwords_required (GHashTable *data,
                         const char *const*hints,
                         gboolean *out_need_password,
+                        gboolean *out_need_pin,
                         gboolean *out_need_certpass,
                         gboolean *out_need_proxypass)
 {
@@ -382,6 +422,7 @@
 	const char *const*iter;
 
 	*out_need_password = FALSE;
+	*out_need_pin = FALSE;
 	*out_need_certpass = FALSE;
 	*out_need_proxypass = FALSE;
 
@@ -403,11 +444,19 @@
 	ctype = g_hash_table_lookup (data, NM_OPENVPN_KEY_CONNECTION_TYPE);
 	g_return_val_if_fail (ctype != NULL, NULL);
 
-	if (!strcmp (ctype, NM_OPENVPN_CONTYPE_TLS) || !strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)) {
+	if (   !strcmp (ctype, NM_OPENVPN_CONTYPE_TLS)
+		|| !strcmp (ctype, NM_OPENVPN_CONTYPE_TLS_PKCS11)
+		|| !strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)
+		|| !strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
+		/* PKCS11 PIN */
+		if (   !strcmp (ctype, NM_OPENVPN_CONTYPE_TLS_PKCS11)
+			|| !strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
+			*out_need_pin = TRUE;
+
 		/* Normal user password */
 		flags = NM_SETTING_SECRET_FLAG_NONE;
 		nm_vpn_service_plugin_get_secret_flags (data, NM_OPENVPN_KEY_PASSWORD, &flags);
-		if (   !strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)
+		if (   (!strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS) || !strcmp (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
 		    && !(flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED))
 			*out_need_password = TRUE;
 
@@ -443,14 +492,17 @@
 	gs_unref_hashtable GHashTable *data = NULL;
 	gs_unref_hashtable GHashTable *secrets = NULL;
 	gboolean need_password = FALSE;
+	gboolean need_pin = FALSE;
 	gboolean need_certpass = FALSE;
 	gboolean need_proxypass = FALSE;
 	gs_strfreev char **hints = NULL;
 	gs_free char *prompt = NULL;
 	nm_auto_free_secret char *new_password = NULL;
+	nm_auto_free_secret char *new_pin = NULL;
 	nm_auto_free_secret char *new_certpass = NULL;
 	nm_auto_free_secret char *new_proxypass = NULL;
 	nm_auto_free_secret char *existing_password = NULL;
+	nm_auto_free_secret char *existing_pin = NULL;
 	nm_auto_free_secret char *existing_certpass = NULL;
 	nm_auto_free_secret char *existing_proxypass = NULL;
 	gboolean external_ui_mode = FALSE;
@@ -511,12 +563,12 @@
 	/* Determine which passwords are actually required, either from hints or
 	 * from looking at the VPN configuration.
 	 */
-	prompt = get_passwords_required (data, (const char *const*) hints, &need_password, &need_certpass, &need_proxypass);
+	prompt = get_passwords_required (data, (const char *const*) hints, &need_password, &need_pin, &need_certpass, &need_proxypass);
 	if (!prompt)
 		prompt = g_strdup_printf (_("You need to authenticate to access the Virtual Private Network “%s”."), vpn_name);
 
 	/* Exit early if we don't need any passwords */
-	if (!need_password && !need_certpass && !need_proxypass) {
+	if (!need_password && !need_pin && !need_certpass && !need_proxypass) {
 		no_secrets_required_func ();
 		return EXIT_SUCCESS;
 	}
@@ -525,13 +577,17 @@
 	                        secrets,
 	                        vpn_uuid,
 	                        need_password,
+	                        need_pin,
 	                        need_certpass,
 	                        need_proxypass,
 	                        &existing_password,
+	                        &existing_pin,
 	                        &existing_certpass,
 	                        &existing_proxypass);
 	if (need_password && !existing_password)
 		ask_user = TRUE;
+	else if (need_pin && !existing_pin)
+		ask_user = TRUE;
 	else if (need_certpass && !existing_certpass)
 		ask_user = TRUE;
 	else if (need_proxypass && !existing_proxypass)
@@ -550,6 +606,9 @@
 		                    need_password,
 		                    existing_password,
 		                    &new_password,
+		                    need_pin,
+		                    existing_pin,
+		                    &new_pin,
 		                    need_certpass,
 		                    existing_certpass,
 		                    &new_certpass,
@@ -564,6 +623,8 @@
 	             allow_interaction,
 	             need_password,
 	             new_password ? new_password : existing_password,
+	             need_pin,
+	             new_pin ? new_pin : existing_pin,
 	             need_certpass,
 	             new_certpass ? new_certpass : existing_certpass,
 	             need_proxypass,
--- properties/import-export_old.c	2018-03-07 19:09:12.000000000 +0100
+++ properties/import-export.c	2020-03-26 14:10:59.451740087 +0100
@@ -791,7 +791,7 @@
 	char *tmp, *tmp2;
 	const char *ta_direction = NULL, *secret_direction = NULL;
 	gboolean allow_ta_direction = FALSE, allow_secret_direction = FALSE;
-	gboolean have_certs, have_ca;
+	gboolean have_certs, have_ca, have_pkcs11;
 	GSList *inline_blobs = NULL, *sl_iter;
 
 	g_return_val_if_fail (!error || !*error, NULL);
@@ -1422,6 +1422,25 @@
 			}
 		}
 
+		if (NM_IN_STRSET (params[0], NMV_OVPN_TAG_PKCS11_ID)) {
+			if (!args_params_check_nargs_n (params, 1, &line_error))
+				goto handle_line_error;
+			if (!args_params_check_arg_nonempty (params, 1, NULL, &line_error))
+				goto handle_line_error;
+			setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID, params[1]);
+			continue;
+		}
+
+		if (NM_IN_STRSET (params[0], NMV_OVPN_TAG_PKCS11_PROVIDERS)) {
+			if (!args_params_check_nargs_n (params, 1, &line_error))
+				goto handle_line_error;
+			if (!args_params_check_arg_nonempty (params, 1, NULL, &line_error))
+				goto handle_line_error;
+			setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS, params[1]);
+			continue;
+		}
+
+
 		if (params[0][0] == '<' && params[0][strlen (params[0]) - 1] == '>') {
 			gs_free char *token = g_strndup (&params[0][1], strlen (params[0]) - 2);
 			gs_free char *end_token = NULL;
@@ -1568,23 +1587,37 @@
 
 	have_certs = FALSE;
 	have_ca = FALSE;
+	have_pkcs11 = FALSE;
 
 	if (nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_CA))
 		have_ca = TRUE;
 
-	if (   have_ca
-	    && nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_CERT)
-	    && nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_KEY))
+	if ((have_ca
+		 && nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_CERT)
+		 && nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_KEY)) ||
+		nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID))
 		have_certs = TRUE;
 
+	if (nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID))
+		have_pkcs11 = TRUE;
+
 	/* Determine connection type */
 	if (have_pass) {
-		if (have_certs)
-			ctype = NM_OPENVPN_CONTYPE_PASSWORD_TLS;
-		else if (have_ca)
+		if (have_certs) {
+			if (have_pkcs11) {
+				ctype = NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11;
+			} else {
+				ctype = NM_OPENVPN_CONTYPE_PASSWORD_TLS;
+			}
+		} else if (have_ca) {
 			ctype = NM_OPENVPN_CONTYPE_PASSWORD;
+		}
 	} else if (have_certs) {
-		ctype = NM_OPENVPN_CONTYPE_TLS;
+		if (have_pkcs11) {
+			ctype = NM_OPENVPN_CONTYPE_TLS_PKCS11;
+		} else {
+			ctype = NM_OPENVPN_CONTYPE_TLS;
+		}
 	} else if (have_sk)
 		ctype = NM_OPENVPN_CONTYPE_STATIC_KEY;
 
@@ -1857,8 +1890,10 @@
 		const char *cacert = NULL, *user_cert = NULL, *private_key = NULL;
 
 		if (NM_IN_STRSET (connection_type, NM_OPENVPN_CONTYPE_TLS,
+		                                   NM_OPENVPN_CONTYPE_TLS_PKCS11,
 		                                   NM_OPENVPN_CONTYPE_PASSWORD,
-		                                   NM_OPENVPN_CONTYPE_PASSWORD_TLS)) {
+						                   NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+		                                   NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
 			value = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_CA);
 			if (nmovpn_arg_is_set (value))
 				cacert = nm_utils_str_utf8safe_unescape (value, &cacert_free);
@@ -1890,7 +1925,8 @@
 	}
 
 	if (NM_IN_STRSET (connection_type, NM_OPENVPN_CONTYPE_PASSWORD,
-	                                   NM_OPENVPN_CONTYPE_PASSWORD_TLS))
+					                   NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+	                                   NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
 		args_write_line (f, NMV_OVPN_TAG_AUTH_USER_PASS);
 
 	if (NM_IN_STRSET (connection_type, NM_OPENVPN_CONTYPE_STATIC_KEY)) {
@@ -1976,7 +2012,9 @@
 
 	if (NM_IN_STRSET (connection_type,
 	                  NM_OPENVPN_CONTYPE_TLS,
-	                  NM_OPENVPN_CONTYPE_PASSWORD_TLS)) {
+	                  NM_OPENVPN_CONTYPE_TLS_PKCS11,
+	                  NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+	                  NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
 		const char *x509_name, *key;
 
 		args_write_line_setting_value (f, NMV_OVPN_TAG_REMOTE_CERT_TLS, s_vpn, NM_OPENVPN_KEY_REMOTE_CERT_TLS);
@@ -2024,6 +2062,10 @@
 		}
 	}
 
+	args_write_line_setting_value (f, NMV_OVPN_TAG_PKCS11_ID, s_vpn, NM_OPENVPN_KEY_PKCS11_ID);
+
+	args_write_line_setting_value (f, NMV_OVPN_TAG_PKCS11_PROVIDERS, s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS);
+
 	proxy_type = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_PROXY_TYPE);
 	if (nmovpn_arg_is_set (proxy_type)) {
 		const char *proxy_server;
--- properties/nm-openvpn-dialog_old.ui	2018-03-12 10:41:18.000000000 +0100
+++ properties/nm-openvpn-dialog.ui	2020-03-26 14:11:02.299755087 +0100
@@ -283,6 +283,138 @@
                       </packing>
                     </child>
                     <child>
+                      <object class="GtkBox" id="tls_pkcs11">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="valign">start</property>
+                        <property name="orientation">vertical</property>
+                        <property name="spacing">6</property>
+                        <child>
+                          <object class="GtkGrid">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="row_spacing">6</property>
+                            <property name="column_spacing">12</property>
+                            <child>
+                              <object class="GtkLabel" id="label37">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label" translatable="yes">PKCS#11 id:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="label38">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label"
+                                          translatable="yes">PKCS#11 providers:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="label40">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label"
+                                          translatable="yes">PKCS#11 pin:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="tls_pkcs11_pin_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text"
+                                          translatable="yes">PIN of PKCS#11 token</property>
+                                <property name="hexpand">True</property>
+                                <property name="visibility">False</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">2</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="tls_pkcs11_id_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text"
+                                          translatable="yes">ID of certificate to use
+config: pkcs11-id</property>
+                                <property name="hexpand">True</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">1</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="tls_pkcs11_providers_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text"
+                                          translatable="yes">Shared lib used to access the pkc#11 functions
+config: pkcs11-providers</property>
+                                <property name="hexpand">True</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">0</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="NMACertChooser" id="tls_pkcs11_ca_cert">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="title" translatable="yes">CA</property>
+                            <property name="flags">5</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                    <child type="tab">
+                      <object class="GtkLabel" id="label36">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="label">page 2</property>
+                      </object>
+                      <packing>
+                        <property name="position">1</property>
+                        <property name="tab_fill">False</property>
+                      </packing>
+                    </child>
+                    <child>
                       <object class="GtkBox" id="pw">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
@@ -370,17 +502,17 @@
                         </child>
                       </object>
                       <packing>
-                        <property name="position">1</property>
+                        <property name="position">2</property>
                       </packing>
                     </child>
                     <child type="tab">
                       <object class="GtkLabel" id="label15">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
-                        <property name="label">page 2</property>
+                        <property name="label">page 3</property>
                       </object>
                       <packing>
-                        <property name="position">1</property>
+                        <property name="position">2</property>
                         <property name="tab_fill">False</property>
                       </packing>
                     </child>
@@ -485,17 +617,216 @@
                         </child>
                       </object>
                       <packing>
-                        <property name="position">2</property>
+                        <property name="position">3</property>
                       </packing>
                     </child>
                     <child type="tab">
                       <object class="GtkLabel" id="label16">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
-                        <property name="label">page 3</property>
+                        <property name="label">page 4</property>
                       </object>
                       <packing>
-                        <property name="position">2</property>
+                        <property name="position">3</property>
+                        <property name="tab_fill">False</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkBox" id="pw_tls_pkcs11">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="valign">start</property>
+                        <property name="orientation">vertical</property>
+                        <property name="spacing">6</property>
+                        <!-- YYY 1 -->
+                        <child>
+                          <object class="GtkGrid">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="row_spacing">6</property>
+                            <property name="column_spacing">12</property>
+                            <child>
+                              <object class="GtkLabel" id="label41">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label" translatable="yes">Password:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="label42">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label" translatable="yes">User name:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="pw_tls_pkcs11_password_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text" translatable="yes">Password passed to OpenVPN when prompted for it.
+config: auth-user-pass</property>
+                                <property name="hexpand">True</property>
+                                <property name="visibility">False</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">1</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="pw_tls_pkcs11_username_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text" translatable="yes">Username passed to OpenVPN when prompted for it. If omitted, use the name of the system user that activates the connection.
+config: auth-user-pass</property>
+                                <property name="hexpand">True</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">0</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="NMACertChooser" id="pw_tls_pkcs11_ca_cert">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="title" translatable="yes">CA</property>
+                            <property name="flags">5</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkGrid">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="row_spacing">6</property>
+                            <property name="column_spacing">12</property>
+                            <child>
+                              <object class="GtkLabel" id="label43">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label" translatable="yes">PKCS#11 id:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">1</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="label44">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label"
+                                          translatable="yes">PKCS#11 providers:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">0</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkLabel" id="label45">
+                                <property name="visible">True</property>
+                                <property name="can_focus">False</property>
+                                <property name="label"
+                                          translatable="yes">PKCS#11 pin:</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">0</property>
+                                <property name="top_attach">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="pw_tls_pkcs11_pin_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text"
+                                          translatable="yes">PIN of PKCS#11 token</property>
+                                <property name="hexpand">True</property>
+                                <property name="visibility">False</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">2</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="pw_tls_pkcs11_id_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text"
+                                          translatable="yes">ID of certificate to use
+config: pkcs11-id</property>
+                                <property name="hexpand">True</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">1</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkEntry" id="pw_tls_pkcs11_providers_entry">
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="tooltip_text"
+                                          translatable="yes">Shared lib used to access the pkc#11 functions
+config: pkcs11-providers</property>
+                                <property name="hexpand">True</property>
+                              </object>
+                              <packing>
+                                <property name="left_attach">1</property>
+                                <property name="top_attach">0</property>
+                                <property name="width">2</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">2</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="position">4</property>
+                      </packing>
+                    </child>
+                    <child type="tab">
+                      <object class="GtkLabel" id="label39">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="label">page 5</property>
+                      </object>
+                      <packing>
+                        <property name="position">4</property>
                         <property name="tab_fill">False</property>
                       </packing>
                     </child>
@@ -621,17 +952,17 @@
                         </child>
                       </object>
                       <packing>
-                        <property name="position">3</property>
+                        <property name="position">5</property>
                       </packing>
                     </child>
                     <child type="tab">
                       <object class="GtkLabel" id="label17">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
-                        <property name="label">page 4</property>
+                        <property name="label">page 6</property>
                       </object>
                       <packing>
-                        <property name="position">3</property>
+                        <property name="position">5</property>
                         <property name="tab_fill">False</property>
                       </packing>
                     </child>
@@ -756,6 +1087,10 @@
       <widget name="label20"/>
       <widget name="label12"/>
       <widget name="label11"/>
+      <widget name="label37"/>
+      <widget name="label38"/>
+      <widget name="label42"/>
+      <widget name="label44"/>
       <widget name="auth_label"/>
     </widgets>
   </object>
--- properties/nm-openvpn-editor_old.c	2018-03-12 11:24:53.000000000 +0100
+++ properties/nm-openvpn-editor.c	2020-03-26 14:11:03.711762528 +0100
@@ -210,6 +210,54 @@
 }
 
 static void
+pkcs11_setup (GtkBuilder *builder,
+			  NMSettingVpn *s_vpn,
+			  const char *prefix,
+			  ChangedCallback changed_cb,
+			  gpointer user_data)
+{
+	GtkWidget *widget;
+	const char *value;
+	char namebuf[150];
+
+	/* Fill in providers */
+	nm_sprintf_buf (namebuf, "%s_providers_entry", prefix);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, namebuf));
+
+	if (s_vpn) {
+		value = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS);
+		if (value && *value)
+			gtk_entry_set_text (GTK_ENTRY (widget), value);
+	}
+	g_signal_connect (G_OBJECT (widget), "changed", G_CALLBACK (changed_cb), user_data);
+
+	/* Fill in id */
+	nm_sprintf_buf (namebuf, "%s_id_entry", prefix);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, namebuf));
+
+	if (s_vpn) {
+		value = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID);
+		if (value && *value)
+			gtk_entry_set_text (GTK_ENTRY (widget), value);
+	}
+	g_signal_connect (G_OBJECT (widget), "changed", G_CALLBACK (changed_cb), user_data);
+
+	/* Fill in the pin */
+	nm_sprintf_buf (namebuf, "%s_pin_entry", prefix);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, namebuf));
+	g_signal_connect (widget, "changed", G_CALLBACK (changed_cb), user_data);
+
+	if (s_vpn) {
+		value = nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PKCS11_PIN);
+		if (value)
+			gtk_entry_set_text (GTK_ENTRY (widget), value);
+	}
+
+	nma_utils_setup_password_storage (widget, 0, (NMSetting *) s_vpn, NM_OPENVPN_KEY_PKCS11_PIN,
+	                                  TRUE, FALSE);
+}
+
+static void
 tls_pw_init_auth_widget (GtkBuilder *builder,
                          NMSettingVpn *s_vpn,
                          const char *contype,
@@ -220,7 +268,7 @@
 	NMACertChooser *ca;
 	const char *value;
 	char namebuf[150];
-	gboolean tls = FALSE, pw = FALSE;
+	gboolean tls = FALSE, pw = FALSE, pkcs11 = FALSE;
 
 	g_return_if_fail (builder != NULL);
 	g_return_if_fail (changed_cb != NULL);
@@ -231,10 +279,17 @@
 	nma_cert_chooser_add_to_size_group (ca, GTK_SIZE_GROUP (gtk_builder_get_object (builder, "labels")));
 
 	/* Three major connection types here: TLS-only, PW-only, and TLS + PW */
-	if (!strcmp (contype, NM_OPENVPN_CONTYPE_TLS) || !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS))
+	if (   !strcmp (contype, NM_OPENVPN_CONTYPE_TLS)
+		|| !strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11)
+		|| !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)
+		|| !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
 		tls = TRUE;
-	if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD) || !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS))
+	if (   !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD)
+		|| !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)
+		|| !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
 		pw = TRUE;
+	if (!strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11) || !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
+		pkcs11 = TRUE;
 
 	g_signal_connect (ca, "changed", G_CALLBACK (changed_cb), user_data);
 	if (s_vpn) {
@@ -248,6 +303,8 @@
 		tls_setup (builder, s_vpn, prefix, ca, changed_cb, user_data);
 	if (pw)
 		pw_setup (builder, s_vpn, prefix, changed_cb, user_data);
+	if (pkcs11)
+		pkcs11_setup (builder, s_vpn, prefix, changed_cb, user_data);
 }
 
 #define SK_DIR_COL_NAME 0
@@ -396,6 +453,40 @@
 }
 
 static gboolean
+validate_pkcs11 (GtkBuilder *builder, const char *prefix, GError **error)
+{
+	GtkWidget *widget;
+	char namebuf[150];
+	const char *str;
+
+	/* We need a provider */
+	nm_sprintf_buf (namebuf, "%s_providers_entry", prefix);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, namebuf));
+	str = gtk_entry_get_text (GTK_ENTRY (widget));
+	if (!str || !*str) {
+		g_set_error (error,
+					 NMV_EDITOR_PLUGIN_ERROR,
+					 NMV_EDITOR_PLUGIN_ERROR_INVALID_PROPERTY,
+					 NM_OPENVPN_KEY_PKCS11_PROVIDERS);
+		return FALSE;
+	}
+
+	/* We need an id */
+	nm_sprintf_buf (namebuf, "%s_id_entry", prefix);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, namebuf));
+	str = gtk_entry_get_text (GTK_ENTRY (widget));
+	if (!str || !*str) {
+		g_set_error (error,
+					 NMV_EDITOR_PLUGIN_ERROR,
+					 NMV_EDITOR_PLUGIN_ERROR_INVALID_PROPERTY,
+					 NM_OPENVPN_KEY_PKCS11_ID);
+		return FALSE;
+	}
+
+	return TRUE;
+}
+
+static gboolean
 auth_widget_check_validity (GtkBuilder *builder, const char *contype, GError **error)
 {
 	GtkWidget *widget;
@@ -409,6 +500,12 @@
 	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)) {
 		if (!validate_tls (builder, "pw_tls", error))
 			return FALSE;
+	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11)) {
+		if (!validate_tls (builder, "tls_pkcs11", error) || !validate_pkcs11 (builder, "tls_pkcs11", error))
+			return FALSE;
+	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
+		if (!validate_tls (builder, "tls_pkcs11", error) || !validate_pkcs11 (builder, "pw_tls_pkcs11", error))
+			return FALSE;
 	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD)) {
 		if (!validate_cert_chooser (builder, "pw_ca_cert", &local)) {
 			g_set_error (error,
@@ -546,6 +643,39 @@
 	nm_setting_set_secret_flags (NM_SETTING (s_vpn), NM_OPENVPN_KEY_PASSWORD, pw_flags, NULL);
 }
 
+static void
+update_pkcs11 (GtkBuilder *builder, const char *prefix, NMSettingVpn *s_vpn)
+{
+	GtkWidget *widget;
+	NMSettingSecretFlags pw_flags;
+	char namebuf[150];
+	const char *str;
+
+	g_return_if_fail (builder != NULL);
+	g_return_if_fail (prefix != NULL);
+	g_return_if_fail (s_vpn != NULL);
+
+	nm_sprintf_buf (namebuf, "%s_providers_entry", prefix);
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, namebuf));
+	str = gtk_entry_get_text (GTK_ENTRY (widget));
+	if (str && *str)
+		nm_setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS, str);
+
+	nm_sprintf_buf (namebuf, "%s_id_entry", prefix);
+	widget = (GtkWidget *) gtk_builder_get_object (builder, namebuf);
+	str = gtk_entry_get_text (GTK_ENTRY (widget));
+	if (str && *str)
+		nm_setting_vpn_add_data_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID, str);
+
+	nm_sprintf_buf (namebuf, "%s_pin_entry", prefix);
+	widget = (GtkWidget *) gtk_builder_get_object (builder, namebuf);
+	str = gtk_entry_get_text (GTK_ENTRY (widget));
+	if (str && *str)
+		nm_setting_vpn_add_secret (s_vpn, NM_OPENVPN_KEY_PKCS11_PIN, str);
+	pw_flags = nma_utils_menu_to_secret_flags (widget);
+	nm_setting_set_secret_flags (NM_SETTING (s_vpn), NM_OPENVPN_KEY_PKCS11_PIN, pw_flags, NULL);
+}
+
 static gboolean
 auth_widget_update_connection (GtkBuilder *builder,
                                const char *contype,
@@ -559,6 +689,9 @@
 
 	if (!strcmp (contype, NM_OPENVPN_CONTYPE_TLS)) {
 		update_tls (builder, "tls", s_vpn);
+	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11)) {
+		update_tls (builder, "tls_pkcs11", s_vpn);
+		update_pkcs11 (builder, "tls_pkcs11", s_vpn);
 	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD)) {
 		update_from_cert_chooser (builder, NM_OPENVPN_KEY_CA, NULL, NULL,
 		                          "pw", "ca_cert", s_vpn);
@@ -566,6 +699,10 @@
 	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)) {
 		update_tls (builder, "pw_tls", s_vpn);
 		update_pw (builder, "pw_tls", s_vpn);
+	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
+		update_tls (builder, "pw_tls_pkcs11", s_vpn);
+		update_pw (builder, "pw_tls_pkcs11", s_vpn);
+		update_pkcs11 (builder, "pw_tls_pkcs11", s_vpn);
 	} else if (!strcmp (contype, NM_OPENVPN_CONTYPE_STATIC_KEY)) {
 		/* Update static key */
 		widget = GTK_WIDGET (gtk_builder_get_object (builder, "sk_key_chooser"));
@@ -1660,7 +1797,9 @@
 
 	if (NM_IN_STRSET (contype,
 	                  NM_OPENVPN_CONTYPE_TLS,
+	                  NM_OPENVPN_CONTYPE_TLS_PKCS11,
 	                  NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+	                  NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11,
 	                  NM_OPENVPN_CONTYPE_PASSWORD)) {
 		/* Initialize direction combo */
 		combo = GTK_WIDGET (gtk_builder_get_object (builder, "direction_combo"));
@@ -1969,7 +2108,9 @@
 
 	contype = g_object_get_data (G_OBJECT (dialog), "connection-type");
 	if (   !strcmp (contype, NM_OPENVPN_CONTYPE_TLS)
+	    || !strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11)
 	    || !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)
+	    || !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)
 	    || !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD)) {
 		char *filename;
 
@@ -2348,8 +2489,10 @@
 		contype = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_CONNECTION_TYPE);
 		if (contype) {
 			if (   strcmp (contype, NM_OPENVPN_CONTYPE_TLS)
+			    && strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11)
 			    && strcmp (contype, NM_OPENVPN_CONTYPE_STATIC_KEY)
 			    && strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD)
+			    && strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS)
 			    && strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS))
 				contype = NM_OPENVPN_CONTYPE_TLS;
 		} else
@@ -2367,6 +2510,19 @@
 	                    COL_AUTH_TYPE, NM_OPENVPN_CONTYPE_TLS,
 	                    -1);
 
+	/* TLS auth widget (PKCS11-mode) */
+	tls_pw_init_auth_widget (priv->builder, s_vpn,
+	                         NM_OPENVPN_CONTYPE_TLS_PKCS11, "tls_pkcs11",
+	                         stuff_changed_cb, self);
+	gtk_list_store_append (store, &iter);
+	gtk_list_store_set (store, &iter,
+	                    COL_AUTH_NAME, _("Certificates (TLS), PKCS#11"),
+	                    COL_AUTH_PAGE, 1,
+	                    COL_AUTH_TYPE, NM_OPENVPN_CONTYPE_TLS_PKCS11,
+	                    -1);
+	if ((active < 0) && !strcmp (contype, NM_OPENVPN_CONTYPE_TLS_PKCS11))
+		active = 1;
+
 	/* Password auth widget */
 	tls_pw_init_auth_widget (priv->builder, s_vpn,
 	                         NM_OPENVPN_CONTYPE_PASSWORD, "pw",
@@ -2374,11 +2530,11 @@
 	gtk_list_store_append (store, &iter);
 	gtk_list_store_set (store, &iter,
 	                    COL_AUTH_NAME, _("Password"),
-	                    COL_AUTH_PAGE, 1,
+	                    COL_AUTH_PAGE, 2,
 	                    COL_AUTH_TYPE, NM_OPENVPN_CONTYPE_PASSWORD,
 	                    -1);
 	if ((active < 0) && !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD))
-		active = 1;
+		active = 2;
 
 	/* Password+TLS auth widget */
 	tls_pw_init_auth_widget (priv->builder, s_vpn,
@@ -2387,11 +2543,25 @@
 	gtk_list_store_append (store, &iter);
 	gtk_list_store_set (store, &iter,
 	                    COL_AUTH_NAME, _("Password with Certificates (TLS)"),
-	                    COL_AUTH_PAGE, 2,
+	                    COL_AUTH_PAGE, 3,
 	                    COL_AUTH_TYPE, NM_OPENVPN_CONTYPE_PASSWORD_TLS,
 	                    -1);
 	if ((active < 0) && !strcmp (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS))
-		active = 2;
+		active = 3;
+ 
+        /* Password+TLS auth widget (PKCS11-mode) */
+        tls_pw_init_auth_widget (priv->builder, s_vpn,
+                                 NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11, "pw_tls_pkcs11",
+                                 stuff_changed_cb, self);
+        gtk_list_store_append (store, &iter);
+        gtk_list_store_set (store, &iter,
+                            COL_AUTH_NAME, _("Password with Certificates (TLS), PKCS#11"),
+                            COL_AUTH_PAGE, 4,
+                            COL_AUTH_TYPE, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11,
+                            -1);
+        if ((active < 0) && nm_streq (contype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11))
+                active = 4;
+
 
 	/* Static key auth widget */
 	sk_init_auth_widget (priv->builder, s_vpn, stuff_changed_cb, self);
@@ -2399,11 +2569,11 @@
 	gtk_list_store_append (store, &iter);
 	gtk_list_store_set (store, &iter,
 	                    COL_AUTH_NAME, _("Static Key"),
-	                    COL_AUTH_PAGE, 3,
+	                    COL_AUTH_PAGE, 5,
 	                    COL_AUTH_TYPE, NM_OPENVPN_CONTYPE_STATIC_KEY,
 	                    -1);
 	if ((active < 0) && !strcmp (contype, NM_OPENVPN_CONTYPE_STATIC_KEY))
-		active = 3;
+		active = 5;
 
 	gtk_combo_box_set_model (GTK_COMBO_BOX (widget), GTK_TREE_MODEL (store));
 	g_object_unref (store);
--- /dev/null	2020-03-26 10:57:10.666090067 +0100
+++ properties/tests/conf/pkcs11.ovpn	2020-03-26 14:29:23.985015212 +0100
@@ -0,0 +1,15 @@
+remote 173.8.149.245 1194
+resolv-retry infinite
+
+dev tun
+persist-key
+persist-tun
+proto udp
+nobind
+client
+
+ca cacert.pem
+
+pkcs11-id magic-id
+pkcs11-providers /pkcs11/provider/path
+
--- /dev/null	2020-03-26 10:57:10.666090067 +0100
+++ properties/tests/conf/pkcs11_pw.ovpn	2020-03-26 14:29:45.213107926 +0100
@@ -0,0 +1,16 @@
+remote 173.8.149.245 1194
+resolv-retry infinite
+
+dev tun
+persist-key
+persist-tun
+proto udp
+nobind
+client
+auth-user-pass
+
+ca cacert.pem
+
+pkcs11-id magic-id
+pkcs11-providers /pkcs11/provider/path
+
--- properties/tests/test-import-export_old.c	2018-02-22 19:08:14.000000000 +0100
+++ properties/tests/test-import-export.c	2020-03-26 14:28:23.040753167 +0100
@@ -496,6 +496,94 @@
 }
 
 static void
+test_pkcs11_import (void)
+{
+	_CREATE_PLUGIN (plugin);
+	NMConnection *connection;
+	NMSettingConnection *s_con;
+	NMSettingVpn *s_vpn;
+	const char *expected_id = "pkcs11";
+
+	connection = get_basic_connection (plugin, SRCDIR, "pkcs11.ovpn");
+	g_assert (connection);
+
+	/* Connection setting */
+	s_con = nm_connection_get_setting_connection (connection);
+	g_assert (s_con);
+	g_assert_cmpstr (nm_setting_connection_get_id (s_con), ==, expected_id);
+	g_assert (!nm_setting_connection_get_uuid (s_con));
+
+	/* VPN setting */
+	s_vpn = nm_connection_get_setting_vpn (connection);
+	g_assert (s_vpn);
+
+	_check_item (s_vpn, NM_OPENVPN_KEY_CONNECTION_TYPE, NM_OPENVPN_CONTYPE_TLS_PKCS11);
+	_check_item (s_vpn, NM_OPENVPN_KEY_DEV, "tun");
+	_check_item (s_vpn, NM_OPENVPN_KEY_PROTO_TCP, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_FLOAT, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_REMOTE, "173.8.149.245:1194");
+	_check_item (s_vpn, NM_OPENVPN_KEY_PORT, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_STATIC_KEY, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_STATIC_KEY_DIRECTION, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_CIPHER, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_LOCAL_IP, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_REMOTE_IP, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_AUTH, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID, "magic-id");
+	_check_item (s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS, "/pkcs11/provider/path");
+
+	_check_item (s_vpn, NM_OPENVPN_KEY_CA, SRCDIR"/cacert.pem");
+
+	_check_secret (s_vpn, NM_OPENVPN_KEY_PASSWORD, NULL);
+	_check_secret (s_vpn, NM_OPENVPN_KEY_CERTPASS, NULL);
+
+	g_object_unref (connection);
+}
+
+static void
+test_pkcs11_pw_import (void)
+{
+	_CREATE_PLUGIN (plugin);
+	NMConnection *connection;
+	NMSettingConnection *s_con;
+	NMSettingVpn *s_vpn;
+	const char *expected_id = "pkcs11_pw";
+
+	connection = get_basic_connection (plugin, SRCDIR, "pkcs11_pw.ovpn");
+	g_assert (connection);
+
+	/* Connection setting */
+	s_con = nm_connection_get_setting_connection (connection);
+	g_assert (s_con);
+	g_assert_cmpstr (nm_setting_connection_get_id (s_con), ==, expected_id);
+	g_assert (!nm_setting_connection_get_uuid (s_con));
+
+	/* VPN setting */
+	s_vpn = nm_connection_get_setting_vpn (connection);
+	g_assert (s_vpn);
+
+	_check_item (s_vpn, NM_OPENVPN_KEY_CONNECTION_TYPE, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11);
+	_check_item (s_vpn, NM_OPENVPN_KEY_DEV, "tun");
+	_check_item (s_vpn, NM_OPENVPN_KEY_PROTO_TCP, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_FLOAT, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_REMOTE, "173.8.149.245:1194");
+	_check_item (s_vpn, NM_OPENVPN_KEY_PORT, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_STATIC_KEY, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_STATIC_KEY_DIRECTION, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_CIPHER, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_LOCAL_IP, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_REMOTE_IP, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_AUTH, NULL);
+	_check_item (s_vpn, NM_OPENVPN_KEY_PKCS11_ID, "magic-id");
+	_check_item (s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS, "/pkcs11/provider/path");
+
+	_check_item (s_vpn, NM_OPENVPN_KEY_CA, SRCDIR"/cacert.pem");
+
+	_check_secret (s_vpn, NM_OPENVPN_KEY_PASSWORD, NULL);
+	_check_secret (s_vpn, NM_OPENVPN_KEY_CERTPASS, NULL);
+}
+
+static void
 test_pkcs12_import (void)
 {
 	_CREATE_PLUGIN (plugin);
@@ -1204,6 +1292,12 @@
 	_add_test_func_simple (test_pkcs12_import);
 	_add_test_func ("pkcs12-export", test_export_compare, "pkcs12.ovpn", "pkcs12.ovpntest");
 
+	_add_test_func_simple (test_pkcs11_import);
+	_add_test_func ("pkcs11-export", test_export_compare, "pkcs11.ovpn", "pkcs11.ovpntest");
+
+	_add_test_func_simple (test_pkcs11_pw_import);
+	_add_test_func ("pkcs11_pw-export", test_export_compare, "pkcs11_pw.ovpn", "pkcs11_pw.ovpntest");
+
 	_add_test_func_simple (test_non_utf8_import);
 
 	_add_test_func ("static-import-1", test_static_key_import, "static.ovpn", "static", "1");
--- shared/nm-service-defines_old.h	2018-03-07 19:09:12.000000000 +0100
+++ shared/nm-service-defines.h	2020-03-26 14:11:06.415776775 +0100
@@ -51,6 +51,8 @@
 #define NM_OPENVPN_KEY_PING "ping"
 #define NM_OPENVPN_KEY_PING_EXIT "ping-exit"
 #define NM_OPENVPN_KEY_PING_RESTART "ping-restart"
+#define NM_OPENVPN_KEY_PKCS11_ID "pkcs11-id"
+#define NM_OPENVPN_KEY_PKCS11_PROVIDERS "pkcs11-providers"
 #define NM_OPENVPN_KEY_PORT "port"
 #define NM_OPENVPN_KEY_PROTO_TCP "proto-tcp"
 #define NM_OPENVPN_KEY_PROXY_PORT "proxy-port"
@@ -77,6 +79,7 @@
 
 #define NM_OPENVPN_KEY_PASSWORD "password"
 #define NM_OPENVPN_KEY_CERTPASS "cert-pass"
+#define NM_OPENVPN_KEY_PKCS11_PIN "pkcs11-pin"
 #define NM_OPENVPN_KEY_HTTP_PROXY_PASSWORD "http-proxy-password"
 /* Internal auth-dialog -> service token indicating that no secrets are
  * required for the connection.
@@ -94,10 +97,12 @@
 #define NM_OPENVPN_AUTH_SHA384 "SHA384"
 #define NM_OPENVPN_AUTH_SHA512 "SHA512"
 
-#define NM_OPENVPN_CONTYPE_PASSWORD     "password"
-#define NM_OPENVPN_CONTYPE_PASSWORD_TLS "password-tls"
-#define NM_OPENVPN_CONTYPE_STATIC_KEY   "static-key"
-#define NM_OPENVPN_CONTYPE_TLS          "tls"
+#define NM_OPENVPN_CONTYPE_PASSWORD            "password"
+#define NM_OPENVPN_CONTYPE_PASSWORD_TLS        "password-tls"
+#define NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11 "password-tls-pkcs11"
+#define NM_OPENVPN_CONTYPE_STATIC_KEY          "static-key"
+#define NM_OPENVPN_CONTYPE_TLS                  "tls"
+#define NM_OPENVPN_CONTYPE_TLS_PKCS11           "tls-pkcs11"
 
 /* arguments of "--remote-cert-tls" */
 #define NM_OPENVPN_REM_CERT_TLS_CLIENT "client"
--- shared/utils_old.h	2018-03-07 19:09:12.000000000 +0100
+++ shared/utils.h	2020-03-26 14:11:08.771789193 +0100
@@ -51,6 +51,8 @@
 #define NMV_OVPN_TAG_NS_CERT_TYPE       "ns-cert-type"
 #define NMV_OVPN_TAG_PERSIST_KEY        "persist-key"
 #define NMV_OVPN_TAG_PERSIST_TUN        "persist-tun"
+#define NMV_OVPN_TAG_PKCS11_ID          "pkcs11-id"
+#define NMV_OVPN_TAG_PKCS11_PROVIDERS   "pkcs11-providers"
 #define NMV_OVPN_TAG_PING               "ping"
 #define NMV_OVPN_TAG_PING_EXIT          "ping-exit"
 #define NMV_OVPN_TAG_PING_RESTART       "ping-restart"
--- src/nm-openvpn-service_old.c	2018-03-07 19:09:12.000000000 +0100
+++ src/nm-openvpn-service.c	2020-03-26 15:01:09.422665982 +0100
@@ -106,6 +106,7 @@
 	char *default_username;
 	char *username;
 	char *password;
+	char *pin;
 	char *priv_key_pass;
 	char *proxy_username;
 	char *proxy_password;
@@ -188,14 +189,18 @@
 	{ NM_OPENVPN_KEY_USERNAME,             G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_PASSWORD"-flags",     G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_CERTPASS"-flags",     G_TYPE_STRING, 0, 0, FALSE },
+	{ NM_OPENVPN_KEY_PKCS11_PIN"-flags",   G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_NOSECRET,             G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_HTTP_PROXY_PASSWORD"-flags", G_TYPE_STRING, 0, 0, FALSE },
+        { NM_OPENVPN_KEY_PKCS11_ID,            G_TYPE_STRING, 0, 0, FALSE },
+        { NM_OPENVPN_KEY_PKCS11_PROVIDERS,     G_TYPE_STRING, 0, 0, FALSE },
 	{ NULL,                                G_TYPE_NONE, FALSE }
 };
 
 static const ValidProperty valid_secrets[] = {
 	{ NM_OPENVPN_KEY_PASSWORD,             G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_CERTPASS,             G_TYPE_STRING, 0, 0, FALSE },
+	{ NM_OPENVPN_KEY_PKCS11_PIN,           G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_NOSECRET,             G_TYPE_STRING, 0, 0, FALSE },
 	{ NM_OPENVPN_KEY_HTTP_PROXY_PASSWORD,  G_TYPE_STRING, 0, 0, FALSE },
 	{ NULL,                                G_TYPE_NONE, FALSE }
@@ -243,17 +248,21 @@
 validate_connection_type (const char *ctype)
 {
 	return NM_IN_STRSET (ctype, NM_OPENVPN_CONTYPE_TLS,
+	                            NM_OPENVPN_CONTYPE_TLS_PKCS11,
 	                            NM_OPENVPN_CONTYPE_STATIC_KEY,
 	                            NM_OPENVPN_CONTYPE_PASSWORD,
-	                            NM_OPENVPN_CONTYPE_PASSWORD_TLS);
+						        NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+	                            NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11);
 }
 
 static gboolean
 connection_type_is_tls_mode (const char *connection_type)
 {
 	return NM_IN_STRSET (connection_type, NM_OPENVPN_CONTYPE_TLS,
+	                                      NM_OPENVPN_CONTYPE_TLS_PKCS11,
 	                                      NM_OPENVPN_CONTYPE_PASSWORD,
-	                                      NM_OPENVPN_CONTYPE_PASSWORD_TLS);
+						                  NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+	                                      NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11);
 }
 
 /*****************************************************************************/
@@ -379,6 +388,13 @@
 	}
 }
 
+static void
+args_add_pkcs11 (GPtrArray *args, NMSettingVpn *s_vpn)
+{
+	args_add_vpn_data (args, s_vpn, NM_OPENVPN_KEY_PKCS11_ID, "--pkcs11-id");
+	args_add_vpn_data (args, s_vpn, NM_OPENVPN_KEY_PKCS11_PROVIDERS, "--pkcs11-providers");
+}
+
 /*****************************************************************************/
 
 static gboolean
@@ -776,6 +792,10 @@
 		memset (io_data->password, 0, strlen (io_data->password));
 	g_free (io_data->password);
 
+	if (io_data->pin)
+		memset (io_data->pin, 0, strlen (io_data->pin));
+	g_free (io_data->pin);
+
 	if (io_data->priv_key_pass)
 		memset (io_data->priv_key_pass, 0, strlen (io_data->priv_key_pass));
 	g_free (io_data->priv_key_pass);
@@ -982,6 +1002,26 @@
 				*out_message = _("An HTTP Proxy username and password are required.");
 		}
 		handled = TRUE;
+	} else if (strlen(requested_auth) > 3 && !strncmp(requested_auth, "PIV", 3)) {
+		if (io_data->pin) {
+			char *pin, *buf;
+
+			/* Quote strings passed back to openvpn */
+			pin = ovpn_quote_string (io_data->pin);
+			buf = g_strdup_printf ("password \"%s\" \"%s\"\n", requested_auth, pin);
+			memset (pin, 0, strlen (pin));
+			g_free (pin);
+
+			/* Will always write everything in blocking channels (on success) */
+			g_io_channel_write_chars (io_data->socket_channel, buf, strlen (buf), NULL, NULL);
+			g_io_channel_flush (io_data->socket_channel, NULL);
+			g_free (buf);
+		} else {
+			hints = g_new0 (const char *, 2);
+			hints[i++] = NM_OPENVPN_KEY_PKCS11_PIN;
+			*out_message = _("A PKCS#11 PIN is required.");
+		}
+		handled = TRUE;
 	}
 
 	*out_hints = g_steal_pointer (&hints);
@@ -1091,6 +1131,17 @@
 		g_free (auth);
 	}
 
+	/*
+	 * Handle >NEED-OK:Need statements,
+	 * for example: >NEED-OK:Need 'token-insertion-request' confirmation MSG:Please insert PIV Card Holder pin (PIV_II) token
+	 */
+	auth = get_detail (str, ">NEED-OK:Need '");
+	if (auth) {
+		_LOGW ("Unhandled management socket request '%s'", auth);
+		*out_failure = NM_VPN_PLUGIN_FAILURE_LOGIN_FAILED;
+		again = FALSE;
+	}
+
 out:
 	g_free (str);
 	return again;
@@ -1226,6 +1277,12 @@
 	}
 	io_data->password = g_strdup (nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PASSWORD));
 
+	if (io_data->pin) {
+		memset (io_data->pin, 0, strlen (io_data->pin));
+		g_free (io_data->pin);
+	}
+	io_data->pin = g_strdup (nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PKCS11_PIN));
+
 	if (io_data->priv_key_pass) {
 		memset (io_data->priv_key_pass, 0, strlen (io_data->priv_key_pass));
 		g_free (io_data->priv_key_pass);
@@ -1843,6 +1900,10 @@
 	if (nm_streq (connection_type, NM_OPENVPN_CONTYPE_TLS)) {
 		args_add_strv (args, "--client");
 		args_add_vpn_certs (args, s_vpn);
+	} else if (nm_streq (connection_type, NM_OPENVPN_CONTYPE_TLS_PKCS11)) {
+		args_add_strv (args, "--client");
+		args_add_vpn_certs (args, s_vpn);
+		args_add_pkcs11 (args, s_vpn);
 	} else if (nm_streq (connection_type, NM_OPENVPN_CONTYPE_STATIC_KEY)) {
 		tmp = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_STATIC_KEY);
 		if (nmovpn_arg_is_set (tmp)) {
@@ -1868,6 +1929,12 @@
 		args_add_vpn_certs (args, s_vpn);
 		/* Use user/path authentication */
 		args_add_strv (args, "--auth-user-pass");
+	} else if (nm_streq (connection_type, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
+		args_add_strv (args, "--client");
+		args_add_vpn_certs (args, s_vpn);
+		/* Use user/path authentication */
+		args_add_strv (args, "--auth-user-pass");
+		args_add_pkcs11 (args, s_vpn);
 	} else {
 		g_set_error (error,
 		             NM_VPN_PLUGIN_ERROR,
@@ -1939,8 +2006,10 @@
 	   X509: May require certificate password
 	*/
 	if (   NM_IN_STRSET (connection_type, NM_OPENVPN_CONTYPE_TLS,
+	                                      NM_OPENVPN_CONTYPE_TLS_PKCS11,
 	                                      NM_OPENVPN_CONTYPE_PASSWORD,
-	                                      NM_OPENVPN_CONTYPE_PASSWORD_TLS)
+						                  NM_OPENVPN_CONTYPE_PASSWORD_TLS,
+	                                      NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)
 	    || nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_HTTP_PROXY_USERNAME)) {
 
 		priv->io_data = g_malloc0 (sizeof (NMOpenvpnPluginIOData));
@@ -1982,6 +2051,32 @@
 					*need_secrets = FALSE;
 			}
 		}
+	} else if (nm_streq (ctype, NM_OPENVPN_CONTYPE_PASSWORD_TLS_PKCS11)) {
+		/* Will require a password and maybe private key password and PKCS#11 PIN*/
+		key = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_KEY);
+		key = nm_utils_str_utf8safe_unescape (key, &key_free);
+		if (is_encrypted (key) && !nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_CERTPASS)) {
+			*need_secrets = TRUE;
+		}
+
+		if (!nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PASSWORD)) {
+			*need_secrets = TRUE;
+			if (nm_setting_get_secret_flags (NM_SETTING (s_vpn), NM_OPENVPN_KEY_PASSWORD, &secret_flags, NULL)) {
+				if (secret_flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED) {
+					*need_secrets = FALSE;
+				}
+			}
+		}
+
+		if (!nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PKCS11_PIN)) {
+			*need_secrets = TRUE;
+			if (nm_setting_get_secret_flags (NM_SETTING (s_vpn), NM_OPENVPN_KEY_PKCS11_PIN, &secret_flags, NULL)) {
+				if (secret_flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED) {
+					*need_secrets = FALSE;
+				}
+			}
+		}
+
 	} else if (nm_streq (ctype, NM_OPENVPN_CONTYPE_PASSWORD)) {
 		/* Will require a password */
 		if (!nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PASSWORD)) {
@@ -1997,6 +2092,20 @@
 		key = nm_utils_str_utf8safe_unescape (key, &key_free);
 		if (is_encrypted (key) && !nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_CERTPASS))
 			*need_secrets = TRUE;
+	} else if (nm_streq (ctype, NM_OPENVPN_CONTYPE_TLS_PKCS11)) {
+		/* May require private key password and PKCS#11 PIN */
+		key = nm_setting_vpn_get_data_item (s_vpn, NM_OPENVPN_KEY_KEY);
+		key = nm_utils_str_utf8safe_unescape (key, &key_free);
+		if (is_encrypted (key) && !nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_CERTPASS))
+			*need_secrets = TRUE;
+
+		if (!nm_setting_vpn_get_secret (s_vpn, NM_OPENVPN_KEY_PKCS11_PIN)) {
+			*need_secrets = TRUE;
+			if (nm_setting_get_secret_flags (NM_SETTING (s_vpn), NM_OPENVPN_KEY_PKCS11_PIN, &secret_flags, NULL)) {
+				if (secret_flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED)
+					*need_secrets = FALSE;
+			}
+		}
 	} else {
 		/* Static key doesn't need passwords */
 	}
